name: Amul Stock Watch (Email)

on:
  schedule:
    # Every hour (GitHub cron uses UTC; IST = UTC+5:30)
    - cron: "0 * * * *"
  workflow_dispatch: {}

jobs:
  check-stock:
    runs-on: ubuntu-latest
    # Need write to persist state files
    permissions:
      contents: write
    env:
      BASE_URL: https://shop.amul.com
      STOCK_STATE_FILE: .github/amul-stock-state.json
      STATUS_FILE: .github/amul-workflow-status.json
      # Default tracked aliases (overridden by .github/amul-tracklist.txt if present)
      TRACKLIST: >-
        amul-chocolate-whey-protein-34-g-or-pack-of-60-sachets,
        amul-whey-protein-32-g-or-pack-of-60-sachets,
        amul-high-protein-buttermilk-200-ml-or-pack-of-30
    steps:
      - name: Checkout (required to read/write state files + optional tracklist)
        uses: actions/checkout@v4

      - name: Ensure jq
        run: |
          if ! command -v jq >/dev/null 2>&1; then
            sudo apt-get update && sudo apt-get install -y jq
          fi

      - name: Load tracklist (file overrides env)
        run: |
          if [ -f ".github/amul-tracklist.txt" ]; then
            echo "Using .github/amul-tracklist.txt"
            TRACKLIST=$(grep -v '^\s*#' .github/amul-tracklist.txt | grep -v '^\s*$' | tr '\n' ',' | sed 's/,$//')
          else
            echo "Using env TRACKLIST"
          fi
          echo "TRACKLIST=$TRACKLIST" >> $GITHUB_ENV

      - name: Load previous stock state (for dedup)
        run: |
          if [ -f "$STOCK_STATE_FILE" ]; then
            cp "$STOCK_STATE_FILE" prev_state.json
            echo "Loaded previous stock state from $STOCK_STATE_FILE"
          else
            echo '{}' > prev_state.json
            echo "No previous stock state; starting fresh."
          fi
          cat prev_state.json

      # Encoded query (avoids [] globbing issues)
      - name: Fetch Amul products (encoded)
        env:
          AMUL_COOKIE: ${{ secrets.AMUL_COOKIE }} # optional cookie if needed
        run: |
          set -euo pipefail
          BASE='https://shop.amul.com/api/1/entity/ms.products'
          hdrs=(
            -H 'accept: application/json, text/plain, */*'
            -H 'frontend: 1'
            -H 'referer: https://shop.amul.com/'
            -H 'base_url: https://shop.amul.com/en/browse/protein'
          )
          if [ -n "${AMUL_COOKIE:-}" ]; then
            hdrs+=(-H "cookie: ${AMUL_COOKIE}")
          fi

          curl -sS --get "$BASE" "${hdrs[@]}" \
            --data-urlencode 'fields[name]=1' \
            --data-urlencode 'fields[brand]=1' \
            --data-urlencode 'fields[categories]=1' \
            --data-urlencode 'fields[collections]=1' \
            --data-urlencode 'fields[alias]=1' \
            --data-urlencode 'fields[sku]=1' \
            --data-urlencode 'fields[price]=1' \
            --data-urlencode 'fields[compare_price]=1' \
            --data-urlencode 'fields[original_price]=1' \
            --data-urlencode 'fields[images]=1' \
            --data-urlencode 'fields[metafields]=1' \
            --data-urlencode 'fields[discounts]=1' \
            --data-urlencode 'fields[catalog_only]=1' \
            --data-urlencode 'fields[is_catalog]=1' \
            --data-urlencode 'fields[seller]=1' \
            --data-urlencode 'fields[available]=1' \
            --data-urlencode 'fields[inventory_quantity]=1' \
            --data-urlencode 'fields[net_quantity]=1' \
            --data-urlencode 'fields[num_reviews]=1' \
            --data-urlencode 'fields[avg_rating]=1' \
            --data-urlencode 'fields[inventory_low_stock_quantity]=1' \
            --data-urlencode 'fields[inventory_allow_out_of_stock]=1' \
            --data-urlencode 'fields[default_variant]=1' \
            --data-urlencode 'fields[variants]=1' \
            --data-urlencode 'fields[lp_seller_ids]=1' \
            --data-urlencode 'filters[0][field]=categories' \
            --data-urlencode 'filters[0][value][0]=protein' \
            --data-urlencode 'filters[0][operator]=in' \
            --data-urlencode 'filters[0][original]=1' \
            --data-urlencode 'facets=true' \
            --data-urlencode 'facetgroup=default_category_facet' \
            --data-urlencode 'limit=32' \
            --data-urlencode 'total=1' \
            --data-urlencode 'start=0' \
            --data-urlencode 'cdc=1m' \
            --data-urlencode 'substore=66505ff0998183e1b1935c75' \
            -o response.json

          jq -r '.data | length' response.json | xargs -I{} echo "Fetched {} products"

      - name: Filter tracked products & build states (current + diff)
        id: states
        run: |
          set -euo pipefail
          IFS=',' read -ra aliases <<< "$TRACKLIST"
          results="[]"
          for alias in "${aliases[@]}"; do
            alias=$(echo "$alias" | xargs)
            [ -z "$alias" ] && continue
            item=$(jq --arg a "$alias" -c '
              .data[] | select(.alias == $a or ((.name|ascii_downcase) | contains($a)))
            ' response.json | head -n 1 || true)
            if [ -n "${item:-}" ]; then
              results=$(jq -c --argjson itm "$item" '. + [$itm]' <<<"$results")
            else
              echo "::warning::Alias not found in feed: $alias"
            fi
          done
          echo "$results" > tracked.json

          echo "â†’ Tracked aliases matched:"
          jq -r '.[] | "\(.alias) | \(.name)"' tracked.json || true

          # current_state.json : { "<alias>": true|false }
          jq -c '
            map({alias, available: (.available==1), qty: (.inventory_quantity // 0)}) as $arr
            | reduce $arr[] as $p ({}; .[$p.alias] = ($p.available and ($p.qty>0)))
          ' tracked.json > current_state.json

          echo "â†’ Current stock state:"
          cat current_state.json

          # new_aliases.json : ["alias1","alias2",... newly in-stock vs prev_state.json]
          jq -n --slurpfile curr current_state.json --slurpfile prev prev_state.json '
            ($curr[0] // {}) as $c |
            ($prev[0] // {}) as $p |
            [ ($c | keys)[] | select(($c[.] == true) and ($p[.] != true)) ]
          ' > new_aliases.json

          echo "â†’ Newly in-stock aliases:"
          cat new_aliases.json

          # Build human lines for NEWLY in-stock only
          NEW_LINES=$(jq -r --argjson NEW "$(cat new_aliases.json)" '
            .[] | select(.alias as $a | $NEW | index($a)) |
            "\(.name) â€” \(.inventory_quantity) in stock | â‚¹\(.price) | https://shop.amul.com/en/product/\(.alias)"
          ' tracked.json || true)

          printf "%s\n" "$NEW_LINES" > newly_in_stock.txt || true

          new_count=$(grep -c . newly_in_stock.txt || true)
          echo "new_count=$new_count" >> "$GITHUB_OUTPUT"

          # For logs only: what is currently in stock (not used for email)
          jq -r '
            .[] | select((.available == 1) and ((.inventory_quantity // 0) > 0)) |
            "\(.name) â€” \(.inventory_quantity) in stock"
          ' tracked.json > current_in_stock.txt || true
          echo "â†’ Currently in stock (for logs):"
          cat current_in_stock.txt || true

      - name: Prepare email (subject + HTML body) â€” only on NEW stock
        if: steps.states.outputs.new_count != '0'
        run: |
          set -euo pipefail
          SUBJECT="Amul stock alert: $(wc -l < newly_in_stock.txt) item(s) newly in stock"

          # Build HTML list for NEWLY in-stock items
          NEW_JSON=$(cat new_aliases.json)
          HTML_START="<p>ðŸ”” <strong>Amul stock alert</strong> â€” new availability detected</p><ul>"
          HTML_ITEMS=$(jq -r --argjson NEW "$NEW_JSON" '
            .[] | select(.alias as $a | $NEW | index($a)) |
            "<li><a href=\"https://shop.amul.com/en/product/"+.alias+"\">" +
            (.name|gsub("&";"&amp;")) + "</a> â€” " +
            ((.inventory_quantity|tostring)) + " in stock | â‚¹" +
            ((.price|tostring)) + "</li>"
          ' tracked.json)
          HTML_END="</ul>"

          {
            echo "EMAIL_SUBJECT<<EOF"
            echo "$SUBJECT"
            echo "EOF"
            echo "EMAIL_BODY<<EOF"
            echo "$HTML_START"
            echo "$HTML_ITEMS"
            echo "$HTML_END"
            echo "EOF"
          } >> "$GITHUB_ENV"

      - name: Send email
        if: steps.states.outputs.new_count != '0'
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: ${{ secrets.SMTP_SERVER }}
          server_port: ${{ secrets.SMTP_PORT }}
          username: ${{ secrets.SMTP_USERNAME }}
          password: ${{ secrets.SMTP_PASSWORD }}
          subject: ${{ env.EMAIL_SUBJECT }}
          to: ${{ secrets.EMAIL_TO }}
          from: ${{ secrets.EMAIL_FROM }}
          html_body: ${{ env.EMAIL_BODY }}

      - name: No NEW in-stock items (dedup guard)
        if: steps.states.outputs.new_count == '0'
        run: |
          echo "No newly in-stock items since the last run (dedup guard)."
          echo "Currently in-stock (for visibility):"
          cat current_in_stock.txt || true

      - name: Persist state files
        # Always update state files so the next run compares against this one.
        # This step also writes the success status to reset the failure alert dedup guard.
        run: |
          set -euo pipefail
          mkdir -p "$(dirname "$STOCK_STATE_FILE")"

          # Write current stock state
          cp current_state.json "$STOCK_STATE_FILE"
          
          # Write success status for the workflow run
          echo '{"status": "success"}' > "$STATUS_FILE"

          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          
          # Add both files to be committed
          git add "$STOCK_STATE_FILE" "$STATUS_FILE"
          
          # Commit if there are any changes to either file
          git commit -m "Update Amul stock and workflow status [skip ci]" || { echo "No state changes to commit."; exit 0; }
          git push

  notify-on-failure:
    runs-on: ubuntu-latest
    needs: check-stock
    if: failure()
    permissions:
      contents: write # To update the failure status
    env:
      STATUS_FILE: .github/amul-workflow-status.json
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Check failure dedup guard
        id: dedup
        run: |
          # Default to sending notification if status file doesn't exist
          if ! [ -f "$STATUS_FILE" ] || [ "$(jq -r .status "$STATUS_FILE")" != "failure" ]; then
            echo "This is a new failure. Notification will be sent."
            echo "send_notification=true" >> "$GITHUB_OUTPUT"
          else
            echo "A failure has already been reported for the previous run. Suppressing notification."
            echo "send_notification=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Send failure email
        if: steps.dedup.outputs.send_notification == 'true'
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: ${{ secrets.SMTP_SERVER }}
          server_port: ${{ secrets.SMTP_PORT }}
          username: ${{ secrets.SMTP_USERNAME }}
          password: ${{ secrets.SMTP_PASSWORD }}
          subject: "ðŸš¨ Workflow Failure: Amul Stock Watch"
          to: ${{ secrets.EMAIL_TO }}
          from: ${{ secrets.EMAIL_FROM }}
          html_body: |
            The 'Amul Stock Watch' workflow has failed.
            <br/><br/>
            Please check the run logs for details:
            <a href="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}">${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}</a>

      - name: Persist failure state
        if: steps.dedup.outputs.send_notification == 'true'
        run: |
          set -euo pipefail
          mkdir -p "$(dirname "$STATUS_FILE")"
          echo '{"status": "failure"}' > "$STATUS_FILE"
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add "$STATUS_FILE"
          git commit -m "Update workflow status to failure [skip ci]"
          git push
